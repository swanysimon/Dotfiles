#!/usr/bin/env bash

export HISTCONTROL=ignoredups
export HISTFILESIZE=5000
export HISTSIZE=5000

export CLICOLOR=1
export EDITOR=vim

shopt -s checkwinsize
shopt -s cmdhist
shopt -s histappend

if [ -z "$XDG_CONFIG_HOME" ]; then
  export XDG_CONFIG_HOME="${HOME}/.config"
fi

if [ -z "$XDG_DATA_HOME" ]; then
  export XDG_DATA_HOME="${HOME}/.local/share"
fi

if [ -z "$XDG_DATA_DIRS" ]; then
  export XDG_DATA_DIRS="/usr/local/share:/usr/share"
fi

if [ -z "$XDG_CONFIG_DIRS" ]; then
  export XDG_DATA_DIRS="/etc/xdg"
fi

if [ -z "$XDG_CACHE_HOME" ]; then
  export XDG_CACHE_HOME="${HOME}/.cache"
fi

# shellcheck disable=SC2009
if ! ps -p "$$" -o command= | grep -q "bash$"; then
  echo "Bash configuration was called for non-bash shell. Skipping configuration." 1>&2
  return 0
fi

# to run internal `cd` commands without messing with the current working directory
rreadlink () (
  declare target_file
  target_file="$1"

  if [ ! -e "$target_file" ]; then
    echo "${target_file}: no such file or directory"
    return 2
  elif [ "$(uname)" != "Darwin" ]; then
    readlink -f "$target_file"
    return $?
  fi

  declare -i max_links_followed
  declare -i links_followed
  max_links_followed=1000
  links_followed=0
  while [ -L "$target_file" ]; do
    cd "$(dirname "$target_file")" &>/dev/null || return 2
    target_file="$(readlink "$(basename "$target_file")")"

    ((links_followed++))
    if [ "$links_followed" -ge "$max_links_followed" ]; then
      declare original_file
      original_file="$1"
      echo "${original_file}: maximum number of symlinks followed. Using ${target_file}" 1>&2
      break
    fi
  done

  cd "$(dirname "$target_file")" &>/dev/null || return 2
  echo "$(pwd -P)/$(basename "$target_file")"
)

DOTFILES_DIR="$(git -C "$(dirname "$(rreadlink "${BASH_SOURCE[0]}")")" rev-parse --show-toplevel)"
export DOTFILES_DIR

__source_if_file_exists () {
  declare FILENAME
  FILENAME="$1"
  if [ -r "$FILENAME" ]; then
    # shellcheck disable=SC1090
    source "$FILENAME"
  fi
}

export PATH="${PATH}:${DOTFILES_DIR}/bin"

if [ -z "$PS1" ] || ! grep -q "i" <<< "$-"; then
  # shell is not interactive
  return
fi

# shellcheck source=./shell/aliases.sh
__source_if_file_exists "${DOTFILES_DIR}/shell/aliases.sh"
# shellcheck source=./shell/bash_functions.sh
__source_if_file_exists "${DOTFILES_DIR}/shell/bash_functions.sh"

# gitignored "plugin" directory, where every shell file is source
if [ -d "${DOTFILES_DIR}/shell/private/" ]; then
  while read -r FOUND_SOURCING_FILE; do
    # shellcheck disable=SC1090
    source "$FOUND_SOURCING_FILE"
  done < <(find -L "${DOTFILES_DIR}/shell/private/" -type f -name '*\.sh')
  unset FOUND_SOURCING_FILE
fi

if command -v brew &>/dev/null; then
    if [ -d "$(brew --prefix)/etc/bash_completion.d" ]; then
      BASH_COMPLETION_COMPAT_DIR="$(brew --prefix)/etc/bash_completion.d"
      export BASH_COMPLETION_COMPAT_DIR="$BASH_COMPLETION_COMPAT_DIR"
      __source_if_file_exists "$(brew --prefix)/share/bash-completion/bash_completion"
    fi

    __source_if_file_exists "$(brew --prefix)/etc/profile.d/bash_completion.sh"
else
  __source_if_file_exists /etc/bash_completion
fi

if command -v __git_complete &>/dev/null; then
  __git_complete g _git
elif command -v _completion_loader &>/dev/null; then
    _completion_loader git
elif ! complete -o default -o nospace -F _git g &>/dev/null; then
  complete -o bashdefault -o default -o nospace -F _git g &>/dev/null
fi

# shellcheck source=./shell/prompt.sh
__source_if_file_exists "${DOTFILES_DIR}/shell/prompt.sh"
